<button id="themeToggle" class=" ml-auto md:ml-0" aria-label="Theme Toggle">
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 22 22" stroke-width={1.5} class="h-8 w-8">
    <path
      class="sun"
      stroke-linecap="round"
      stroke-linejoin="round"
      d="M3 5H19V6H20V7H21V15H20V16H19V17H3V16H2V15H1V7H2V6H3V5M13 8V9H12V13H13V14H17V13H18V9H17V8H13Z"
    ></path>
    <path
    class="moon"
    stroke-linecap="round"
    stroke-linejoin="round"
    transform="rotate(180, 11, 11)"
    d="M3 5H19V6H20V7H21V15H20V16H19V17H3V16H2V15H1V7H2V6H3V5M13 8V9H12V13H13V14H17V13H18V9H17V8H13Z"
  ></path>
</button>

<script is:inline>
  // Siempre empieza en modo DARK por defecto
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme'); // Si ya existe una preferencia, la usamos
    }
    return 'dark'; // Siempre por defecto en DARK
  })();

  // Aplicar el tema
  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  // Guardar la preferencia en localStorage
  localStorage.setItem('theme', theme);

  // Función para cambiar el tema al hacer clic
  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle('dark');

    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
  };

  // Asignar el evento al botón de cambio de tema
  const toogle = () => {
    document.getElementById('themeToggle').addEventListener('click', handleToggleClick);
  };

  toogle();

  // Asegurar que el tema se mantenga tras cambios en Astro
  document.addEventListener('astro:after-swap', function () {
    if (localStorage.getItem('theme') === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    toogle();
  });
</script>

